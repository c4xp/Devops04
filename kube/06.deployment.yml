---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deployment
  namespace: myapp-namespace
  labels:
    app: myapp-tutorial
spec:
  replicas: 3
  # number of seconds after pod is up that it's considered ready
  minReadySeconds: 6
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # the maximum number of pods that can be created over the desired number of pods
      maxSurge: 1
      # the maximum number of pods that can be unavailable during the update process
      maxUnavailable: 1
  selector:
    matchLabels:
      app: myapp-tutorial
      tier: app
  template:
    metadata:
      labels:
        app: myapp-tutorial
        tier: app
    spec:
      containers:
      - name: my-k8s-app
        image: c4xp/myapp:v1.3
        # image: monachus/rancher-demo:latest
        imagePullPolicy: Always
        env:
        # plaintexts
        - name: LOCALHOST
          valueFrom:
            configMapKeyRef:
              name: "myapp-configsmap"
              key: "LOCALHOST"
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: "myapp-configsmap"
              key: "PORT"
        - name: DB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: "myapp-configsmap"
              key: "DB_DATABASE"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: "myapp-configsmap"
              key: "DB_HOST"
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: "myapp-configsmap"
              key: "DB_USERNAME"
        # secrets
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "myapp-secretsmap"
              key: "DB_PASSWORD"
        ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
        volumeMounts:
          - name: myapp-current-files
            mountPath: "/var/www/html/app/public/img"
      volumes:
      - name: myapp-current-files
        persistentVolumeClaim:
          claimName: myapp-files-pvc
      # need first to generate registry credentials
      # kubectl create secret docker-registry myapp-secret-registry --docker-email="santa@nort.pole" --docker-username="santaclaus" --docker-password="password1" --docker-server="https://index.docker.io/v1/"
      imagePullSecrets:
        - name: myapp-secret-registry